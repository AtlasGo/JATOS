# Routes
# This file defines all routes for JATOS' GUI (Higher priority routes first)
# Order is important!
# ~~~~

# Tests controller
GET      /jatos/test                                                        @controllers.gui.Tests.test(request: Request)
GET      /jatos/testDatabase                                                @controllers.gui.Tests.testDatabase()
GET      /jatos/testStudyAssetsRootFolder                                   @controllers.gui.Tests.testStudyAssetsRootFolder()
GET      /jatos/testCache                                                   @controllers.gui.Tests.testCache()
GET      /jatos/testJsonSerialization                                       @controllers.gui.Tests.testJsonSerialization()
GET      /jatos/testWebSocket                                               @controllers.gui.Tests.testWebSocket()

# Authentication controller
GET      /jatos/login                                                       @controllers.gui.Authentication.login()
POST     /jatos/login                                                       @controllers.gui.Authentication.authenticate(request: Request)
GET      /jatos/logout                                                      @controllers.gui.Authentication.logout(request: Request)

# Home controller
GET      /jatos/sidebarStudyList                                            @controllers.gui.Home.sidebarStudyList()
GET      /jatos                                                             @controllers.gui.Home.home(request: Request)
GET      /jatos/                                                            @controllers.gui.Home.home(request: Request)
GET      /                                                                  @controllers.gui.Home.home(request: Request)
# /jatos/admin/log is deprecated and /jatos/log should be used instead
GET      /jatos/admin/log                                                   @controllers.gui.Home.log(limit: Integer ?= 1000)
GET      /jatos/log                                                         @controllers.gui.Home.log(limit: Integer ?= 1000)
GET      /jatos/releaseInfo                                                 @controllers.gui.Home.getReleaseInfo(allowPreReleases:Boolean ?= false)
GET      /jatos/downloadLatestJatos                                         @controllers.gui.Home.downloadLatestJatos(dry:Boolean ?= false)
GET      /jatos/updateAndRestart                                            @controllers.gui.Home.updateAndRestart(backupAll:Boolean)

# Users controller
GET      /jatos/userManager                                                 @controllers.gui.Users.userManager(request: Request)
GET      /jatos/userData                                                    @controllers.gui.Users.allUserData()
POST     /jatos/user                                                        @controllers.gui.Users.submitCreated()
POST     /jatos/user/:email/profile                                         @controllers.gui.Users.submitEditedProfile(request: Request, email: String)
GET      /jatos/user/:email/userData                                        @controllers.gui.Users.singleUserData(request: Request, email: String)
POST     /jatos/user/:email/password                                        @controllers.gui.Users.submitChangedPassword(email: String)
POST     /jatos/user/:email/admin                                           @controllers.gui.Users.toggleAdmin(email: String, admin: Boolean)
GET      /jatos/user/:email                                                 @controllers.gui.Users.profile(request: Request, email: String)
# Play doesn't allow data in body in a DELETE request, so I use POST instead
POST     /jatos/user/:email/delete                                          @controllers.gui.Users.remove(email: String)

# ComponentResults & StudyResults controller
GET      /jatos/worker/:workerId/tableData                                  @controllers.gui.StudyResults.tableDataByWorker(workerId: Long)
GET      /jatos/worker/:workerId/results                                    @controllers.gui.StudyResults.workersStudyResults(request: Request, workerId: Long)
DELETE   /jatos/worker/:workerId/allResultData                              @controllers.gui.StudyResults.removeAllOfWorker(request: Request, workerId: Long)
GET      /jatos/:studyId/batch/:batchId/results                             @controllers.gui.StudyResults.batchesStudyResults(request: Request, studyId: Long, batchId: Long, workerType: String ?= null)
GET      /jatos/:studyId/batch/:batchId/tableData                           @controllers.gui.StudyResults.tableDataByBatch(studyId: Long, batchId: Long, workerType: String ?= null)
GET      /jatos/:studyId/group/:groupId/results                             @controllers.gui.StudyResults.groupsStudyResults(request: Request, studyId: Long, groupId: Long)
GET      /jatos/:studyId/group/:groupId/tableData                           @controllers.gui.StudyResults.tableDataByGroup(studyId: Long, groupId: Long)
DELETE   /jatos/componentResult                                             @controllers.gui.ComponentResults.remove(componentResultIds: String)
GET      /jatos/:studyId/:componentId/results                               @controllers.gui.ComponentResults.componentResults(request: Request, studyId: Long, componentId: Long)
GET      /jatos/:studyId/:componentId/tableData                             @controllers.gui.ComponentResults.tableDataByComponent(studyId: Long, componentId: Long)
DELETE   /jatos/:studyId/:componentId/allResults                            @controllers.gui.ComponentResults.removeAllOfComponent(request: Request, studyId: Long, componentId: Long)
DELETE   /jatos/studyResult                                                 @controllers.gui.StudyResults.remove(studyResultIds: String)
GET      /jatos/:studyId/results                                            @controllers.gui.StudyResults.studysStudyResults(request: Request, studyId: Long)
GET      /jatos/:studyId/resultsTableData                                   @controllers.gui.StudyResults.tableDataByStudy(studyId: Long)
DELETE   /jatos/:studyId/allResults                                         @controllers.gui.StudyResults.removeAllOfStudy(request: Request, studyId: Long)

# Studies controller
POST     /jatos/study                                                       @controllers.gui.Studies.submitCreated()
GET      /jatos/:studyId/properties                                         @controllers.gui.Studies.properties(request: Request, studyId: Long)
POST     /jatos/:studyId/properties                                         @controllers.gui.Studies.submitEdited(studyId: Long)
POST     /jatos/:studyId/memberUser                                         @controllers.gui.Studies.toggleMemberUser(studyId: Long, email: String, isMember: Boolean)
POST     /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.addAllMemberUsers(studyId: Long)
DELETE   /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.removeAllMemberUsers(studyId: Long)
GET      /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.memberUsers(studyId: Long)
DELETE   /jatos/:studyId                                                    @controllers.gui.Studies.remove(studyId: Long)
POST     /jatos/:studyId/componentOrder                                     @controllers.gui.Studies.changeComponentOrder(studyId: Long, componentId: Long, newPosition: String)
GET      /jatos/:studyId/run                                                @controllers.gui.Studies.runStudy(request: Request, studyId: Long, batchId: Long ?= -1)
GET      /jatos/:studyId/clone                                              @controllers.gui.Studies.cloneStudy(studyId: Long)
POST     /jatos/:studyId/lock/toggle                                        @controllers.gui.Studies.toggleLock(request: Request, studyId: Long)
GET      /jatos/:studyId/componentsTableData                                @controllers.gui.Studies.tableDataByStudy(request: Request, studyId: Long)
GET      /jatos/:studyId/log                                                @controllers.gui.Studies.studyLog(request: Request, studyId: Long, limit: Integer ?= -1, download: Boolean ?= false)
GET      /jatos/:studyId/allWorkers                                         @controllers.gui.Studies.allWorkers(studyId: Long)
GET      /jatos/:studyId                                                    @controllers.gui.Studies.study(request: Request, studyId: Long)
GET      /jatos/:studyId/                                                   @controllers.gui.Studies.study(request: Request, studyId: Long)

# Batches and workers controller
GET      /jatos/:studyId/workerAndBatchManager                              @controllers.gui.Batches.workerAndBatchManager(request: Request, studyId: Long)
POST     /jatos/:studyId/batch                                              @controllers.gui.Batches.submitCreated(studyId: Long)
POST     /jatos/:studyId/batch/:batchId/properties/workerType/:workerType   @controllers.gui.Batches.toggleAllowedWorkerType(studyId: Long, batchId: Long, workerType: String, allow: Boolean)
POST     /jatos/:studyId/batch/:batchId/properties/active                   @controllers.gui.Batches.toggleActive(studyId: Long, batchId: Long, active: Boolean)
GET      /jatos/:studyId/batch/:batchId/properties                          @controllers.gui.Batches.properties(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/properties                          @controllers.gui.Batches.submitEditedProperties(request: Request, studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId/batchSessionData                    @controllers.gui.Batches.batchSessionData(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/batchSessionData                    @controllers.gui.Batches.submitEditedBatchSessionData(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/personalSingleRun                   @controllers.gui.Batches.createPersonalSingleRun(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/personalMultipleRun                 @controllers.gui.Batches.createPersonalMultipleRun(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId/workerSetupData                     @controllers.gui.Batches.workerSetupData(studyId: Long, batchId: Long)
DELETE   /jatos/:studyId/batch/:batchId                                     @controllers.gui.Batches.remove(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId                                     @controllers.gui.Batches.batchById(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batches                                            @controllers.gui.Batches.batchesByStudy(studyId: Long)
GET      /jatos/:studyId/batch/:batchId/groups                              @controllers.gui.Batches.groupsByBatch(studyId: Long, batchId: Long)
GET      /jatos/:studyId/group/:groupId/groupSessionData                    @controllers.gui.Batches.groupSessionData(studyId: Long, groupId: Long)
POST     /jatos/:studyId/group/:groupId/groupSessionData                    @controllers.gui.Batches.submitEditedGroupSessionData(studyId: Long, groupId: Long)

# Components controller
POST     /jatos/:studyId/component                                          @controllers.gui.Components.submitCreated(request: Request, studyId: Long)
POST     /jatos/:studyId/:componentId/properties/active                     @controllers.gui.Components.toggleActive(request: Request, studyId: Long, componentId: Long, active: Boolean)
GET      /jatos/:studyId/:componentId/properties                            @controllers.gui.Components.properties(studyId: Long, componentId: Long)
POST     /jatos/:studyId/:componentId/properties                            @controllers.gui.Components.submitEdited(request: Request, studyId: Long, componentId: Long)
DELETE   /jatos/:studyId/:componentId                                       @controllers.gui.Components.remove(request: Request, studyId: Long, componentId: Long)
GET      /jatos/:studyId/:componentId/run                                   @controllers.gui.Components.runComponent(request: Request, studyId: Long, componentId: Long, batchId: Long ?= -1)
GET      /jatos/:studyId/:componentId/clone                                 @controllers.gui.Components.cloneComponent(request: Request, studyId: Long, componentId: Long)

# ImportExport controller
GET      /jatos/worker/:workerId/export/allResultData                       @controllers.gui.ImportExport.exportAllResultDataOfWorker(workerId: Long)
POST     /jatos/studyResult/export/resultData                               @controllers.gui.ImportExport.exportDataOfStudyResults()
POST     /jatos/componentResult/export/resultData                           @controllers.gui.ImportExport.exportDataOfComponentResults()
POST     /jatos/import/study                                                @controllers.gui.ImportExport.importStudy(request: Request)
POST     /jatos/import/studyConfirmed                                       @controllers.gui.ImportExport.importStudyConfirmed(request: Request)
GET      /jatos/:studyId/export                                             @controllers.gui.ImportExport.exportStudy(studyId: Long)
GET      /jatos/:studyId/export/allResultData                               @controllers.gui.ImportExport.exportDataOfAllStudyResults(studyId: Long)
POST     /jatos/:studyId/import/component                                   @controllers.gui.ImportExport.importComponent(request: Request, studyId: Long)
POST     /jatos/:studyId/import/componentConfirmed                          @controllers.gui.ImportExport.importComponentConfirmed(request: Request, studyId: Long)
GET      /jatos/:studyId/:componentId/export/allResultData                  @controllers.gui.ImportExport.exportDataOfAllComponentResults(studyId: Long, componentId: Long)
GET      /jatos/:studyId/:componentId/export                                @controllers.gui.ImportExport.exportComponent(studyId: Long, componentId: Long)


### Static resources ###
GET      /public/*file                                                      controllers.gui.Assets.versioned(path = "/public", file)
